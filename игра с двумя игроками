from tkinter import *
import random
import time

max_score=5

root=Tk()
root.title("Game")
root.resizable(False,False)
root.wm_attributes("-topmost",1)
canvas=Canvas(root,width=500,height=400,bd=0,highlightthickness=0)
canvas.pack()
root.update()

class Ball:
    def __init__(self,canvas,paddle,paddle2,color):
        self.canvas=canvas
        self.paddle=paddle
        self.paddle2=paddle2
        self.color=color
        self.id=None
        self.new()

    def new(self):
        if self.id:
            self.canvas.delete(self.id)
        
            self.id=canvas.create_oval(10,10,25,25,fill=self.color)
            self.canvas.move(self.id,250,200)
            starts=[-3,-2,-1,1,2,3]
            random.shuffle(starts)
            self.x=starts[0]
            self.y=-3
            self.canvas_height=self.canvas.winfo_height()
            self.canvas_width=self.canvas.winfo_width()
            self.hit_bottom=False
            self.hit_top=False
        
    def draw(self):
        self.canvas.move(self.id,self.x,self.y)
        pos=self.canvas.coords(self.id)
        if pos[1]<=0:
            self.hit_top=True
        if pos[3]>= self.canvas_height:
            self.hit_bottom=True
        if self.hit_paddle(pos)==True:
            self.y=-3
        if self.hit_paddl2(pos)==True:
            self.y=3
        if pos[0]<=0:
            self.x=3
        if pos[2]>=self.canvas_width:
            self.x=-3


    def hit_paddle(self,pos):
        paddle_pos=self.canvas.coords(self.paddle.id)
        if pos[2]>=paddle_pos[0] and pos[0]<=paddle_pos[2]:
            if pos[3]>=paddle_pos[1] and pos[3]<=paddle_pos[3]:
                self.x+=self.paddle.x
                return True
        return False

    def hit_paddle2(self,pos):
        paddle2_pos=self.canvas.coords(self.paddle2.id)
        if pos[2]>=paddle_pos[0] and pos[0]<=paddle_pos[2]:
            if pos[1]>=paddle_pos[3] and pos[1]<=paddle_pos[1]:
                self.x+=self.paddle.x
                return True
        return False

    

    
class Paddle:
    def __init__(self,canvas,color):
        
        self.canvas=canvas
        self.id=canvas.create_rectangle(0,0,100,10,fill=color)
        self.canvas.move(self.id,200,350)
        self.x=0
        self.canvas_width=self.canvas.winfo_width()
        self.started=False
        self.canvas.bind_all('<KeyPress-Right>',self.turn_right)
        self.canvas.bind_all('<KeyPress-Left>',self.turn_left)
        self.canvas.bind_all('<Button-1>',self.start_game)
        
    def turn_left(self,event):
        self.x=-2
        
    def turn_right(self,event):
        self.x=2
        
        
    def draw(self):
        self.canvas.move(self.id,self.x,0)
        pos=self.canvas.coords(self.id)
        if pos[0]<=0:
            self.x=0
        elif pos[2]>= self.canvas_width:
            self.x=0


    def start_game(self,event):
        self.started=True
    

class Score:
    def __init__(self,canvas):
        self.score_black=0
        self.score_yellow=0
        self.canvas=canvas
        self.black=canvas.create_text(450,10,text=self.score_black,fill='black')
        self.yellow=canvas.create_text(450,30,text=self.score_yellow,fill='yellow')

    def hit_black(self):
        self.score_black+=1
        self.canvas.itemconfigure(self.black,text=self.score_black)
        
    def hit_yellow(self):
        self.score_yellow+=1
        self.canvas.itemconfigure(self.yellow,text=self.score_yellow)

    def get_black(self):
        return self.score_yellow

    def get_yellow(self):
        return self.score_black

class Paddle2:
    def __init__(self,canvas,color):
        
        self.canvas=canvas
        self.id=canvas.create_rectangle(0,0,100,10,fill=color)
        self.canvas.move(self.id,200,0)
        self.x=0
        self.canvas_width=self.canvas.winfo_width()
        self.started=False
        self.canvas.bind_all('<k>',self.turn_right)
        self.canvas.bind_all('<g>',self.turn_left)
        self.canvas.bind_all('<Button-1>',self.start_game)
        
    def turn_left(self,event):
        self.x=-2
        
    def turn_right(self,event):
        self.x=2

    def draw(self):
        self.canvas.move(self.id,self.x,0)
        pos=self.canvas.coords(self.id)
        if pos[0]<=0:
            self.x=0
        elif pos[2]>= self.canvas_width:
            self.x=0


    def start_game(self,event):
        self.started=True   

paddle2=Paddle2(canvas,'yellow')
score=Score(canvas)
paddle=Paddle(canvas,'black')
ball=Ball(canvas,paddle,paddle2,'blue')

game_over=false

while True:

    if ball.hit_bottom==False and ball.hit_top==False and paddle.started==True:
         
        ball.draw()
        paddle.draw()
        paddle2.draw()
    if ball.hit_bottom==True:
        score.hit_yellow()
        ball.new()
        time.sleep(1)
    if ball.hit_top==True:
        score.hit_black()
        ball.new()
        time.sleep(1)        
        break
    root.update_idletasks()
    root.update()
    time.sleep(0.01)
    



